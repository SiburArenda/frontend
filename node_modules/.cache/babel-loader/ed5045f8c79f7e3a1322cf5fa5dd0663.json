{"ast":null,"code":"var _jsxFileName = \"C:\\\\My\\\\Projects\\\\Web\\\\sibur_arenda_1.0\\\\src\\\\components\\\\Calendar.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport '../resource/styles/Calendar.css';\nimport TimeSelectDialogue from \"./TimeSelectDialogue\";\nimport Timing from \"../functional/Timing\";\n\nclass Calendar extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dateContext: moment(),\n      today: moment(),\n      showMonthPopup: false,\n      showYearPopup: false,\n      selectedDays: [],\n      selectedTimings: [],\n      lastChosenWithShift: null,\n      timeSelectDialogue: null,\n      currentlyManagedDayIndex: -1\n    };\n    this.weekdaysShort = ['ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ', 'ВС'];\n    this.months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\n\n    this.year = () => this.state.dateContext.format(\"Y\");\n\n    this.month = () => {\n      const monthEng = this.state.dateContext.format(\"MMMM\"); // eslint-disable-next-line default-case\n\n      switch (monthEng) {\n        case 'January':\n          {\n            return 'Январь';\n          }\n\n        case 'February':\n          {\n            return 'Февраль';\n          }\n\n        case 'March':\n          {\n            return 'Март';\n          }\n\n        case 'April':\n          {\n            return 'Апрель';\n          }\n\n        case 'May':\n          {\n            return 'Май';\n          }\n\n        case 'June':\n          {\n            return 'Июнь';\n          }\n\n        case 'July':\n          {\n            return 'Июль';\n          }\n\n        case 'August':\n          {\n            return 'Август';\n          }\n\n        case 'September':\n          {\n            return 'Сентябрь';\n          }\n\n        case 'October':\n          {\n            return 'Октябрь';\n          }\n\n        case 'November':\n          {\n            return 'Ноябрь';\n          }\n\n        case 'December':\n          {\n            return 'Декабрь';\n          }\n      }\n    };\n\n    this.daysInMonth = () => this.state.dateContext.daysInMonth();\n\n    this.firstDayOfMonth = () => moment(this.state.dateContext).startOf('month').format('d');\n\n    this.setMonth = month => {\n      const monthNo = this.months.indexOf(month);\n      let dateContext = Object.assign({}, this.state.dateContext);\n      dateContext = moment(dateContext).set(\"month\", monthNo);\n      this.setState({\n        dateContext: dateContext\n      });\n    };\n\n    this.moveMonth = side => {\n      let dateContext = Object.assign({}, this.state.dateContext);\n      dateContext = moment(dateContext).add(side, \"month\");\n      this.setState({\n        dateContext: dateContext\n      });\n    };\n\n    this.SelectList = props => {\n      const popup = props.monthList.map(monthName => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: monthName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          onClick: () => {\n            this.setMonth(monthName);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }\n        }, monthName));\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"month-select-popup\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }, popup);\n    };\n\n    this.onChangeMonth = () => {\n      this.setState({\n        showMonthPopup: !this.state.showMonthPopup\n      });\n    };\n\n    this.MonthNav = () => {\n      return /*#__PURE__*/React.createElement(\"span\", {\n        id: \"month-nav\",\n        onClick: () => {\n          this.onChangeMonth();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, this.month(), this.state.showMonthPopup ? /*#__PURE__*/React.createElement(this.SelectList, {\n        monthList: this.months,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 23\n        }\n      }) : null);\n    };\n\n    this.showYearEditor = () => {\n      this.setState({\n        showYearNav: !this.state.showYearNav\n      });\n    };\n\n    this.setYear = e => {\n      const userInput = e.target.value;\n\n      if (/\\d+/.test(userInput)) {\n        let dateContext = Object.assign({}, this.state.dateContext);\n        dateContext = moment(dateContext).set(\"year\", e.target.value);\n        this.setState({\n          dateContext: dateContext\n        });\n      }\n    };\n\n    this.onKeyUpYear = e => {\n      if (e.which === 13 || e.which === 27) {\n        this.setYear(e);\n        this.setState({\n          showYearNav: false\n        });\n      }\n    };\n\n    this.YearNav = () => {\n      return this.state.showYearNav ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        defaultValue: this.year(),\n        onKeyUp: e => this.onKeyUpYear(e),\n        type: \"number\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"transparent-element no-border-element\",\n        onClick: () => {\n          this.showYearEditor();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }\n      }, \"OK\")) : /*#__PURE__*/React.createElement(\"span\", {\n        onClick: () => {\n          this.showYearEditor();\n        },\n        id: \"year-nav\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, this.year());\n    };\n\n    this.exactDayDescription = day => {\n      const monthIndex = moment.months().indexOf(this.state.dateContext.format(\"MMMM\"));\n      const monthShort = moment.monthsShort()[monthIndex];\n      return `${monthShort} ${day} ${this.year()}`;\n    };\n\n    this.onDayClick = (e, day) => {\n      if (e.target.className.indexOf('time-set-button') === -1) {\n        const clickedDayDescription = this.exactDayDescription(day);\n\n        if (e.shiftKey) {\n          const additionDays = [];\n          const additionTimings = [];\n\n          if (this.state.lastChosenWithShift === null) {\n            if (!this.state.selectedDays.includes(clickedDayDescription)) {\n              additionDays.push(clickedDayDescription);\n              additionTimings.push(new Timing());\n            }\n\n            this.setState({\n              lastChosenWithShift: day,\n              selectedDays: [...this.state.selectedDays, ...additionDays],\n              selectedTimings: [...this.state.selectedTimings, ...additionTimings]\n            });\n          } else {\n            if (this.state.lastChosenWithShift < day) {\n              for (let i = this.state.lastChosenWithShift + 1; i <= day; i++) {\n                const iDesc = this.exactDayDescription(i);\n\n                if (!this.state.selectedDays.includes(iDesc)) {\n                  additionDays.push(iDesc);\n                  additionTimings.push(new Timing());\n                }\n              }\n            } else {\n              for (let i = day; i <= this.state.lastChosenWithShift - 1; i++) {\n                const iDesc = this.exactDayDescription(i);\n\n                if (!this.state.selectedDays.includes(iDesc)) {\n                  additionDays.push(iDesc);\n                  additionTimings.push(new Timing());\n                }\n              }\n            }\n\n            this.setState({\n              lastChosenWithShift: null,\n              selectedDays: [...this.state.selectedDays, ...additionDays],\n              selectedTimings: [...this.state.selectedTimings, ...additionTimings]\n            });\n          }\n        } else {\n          const newSelectedDays = this.state.selectedDays.slice();\n          const newSelectedTimings = this.state.selectedTimings.slice();\n          const index = newSelectedDays.indexOf(clickedDayDescription);\n\n          if (index > -1) {\n            newSelectedDays.splice(index, 1);\n            newSelectedTimings.splice(index, 1);\n          } else {\n            newSelectedDays.push(clickedDayDescription);\n            newSelectedTimings.push(new Timing());\n          }\n\n          const timeSelect = index === +this.state.currentlyManagedDayIndex ? null : this.state.timeSelectDialogue;\n          let newDayIndex = this.state.currentlyManagedDayIndex;\n          newDayIndex -= index < newDayIndex ? 1 : 0;\n          this.setState({\n            selectedDays: newSelectedDays,\n            selectedTimings: newSelectedTimings,\n            timeSelectDialogue: timeSelect,\n            currentlyManagedDayIndex: newDayIndex\n          });\n        }\n      }\n    };\n\n    this.changeTiming = (attr, timing) => {\n      const newTimings = this.state.selectedTimings.slice();\n      newTimings[this.state.currentlyManagedDayIndex].setTiming(attr, timing);\n      this.setState({\n        selectedTimings: newTimings\n      });\n    };\n\n    this.timeSetButton = (e, day) => {\n      const dayDesc = this.exactDayDescription(day);\n\n      if (!this.state.selectedDays.includes(dayDesc)) {\n        this.setState({\n          selectedDays: [...this.state.selectedDays, dayDesc],\n          selectedTimings: [...this.state.selectedTimings, new Timing()]\n        });\n      }\n\n      if (!e.shiftKey) {\n        const prob = this.state.selectedDays.indexOf(dayDesc);\n        const index = prob === -1 ? this.state.selectedDays.length : prob;\n        const newTimingObj = prob === -1 ? new Timing() : this.state.selectedTimings[index];\n        const timeSelect = /*#__PURE__*/React.createElement(TimeSelectDialogue, {\n          dayToShow: newTimingObj,\n          changeTiming: this.changeTiming,\n          setForAll: this.setForAll,\n          closeTimeSelectDialogue: () => this.closeTimeSettings(),\n          startHRef: el => {\n            if (el != null) el.value = el.defaultValue;\n          },\n          startMRef: el => {\n            if (el != null) el.value = el.defaultValue;\n          },\n          endHRef: el => {\n            if (el != null) el.value = el.defaultValue;\n          },\n          endMRef: el => {\n            if (el != null) el.value = el.defaultValue;\n          },\n          checkBoxRef: el => {\n            if (el != null) el.checked = false;\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }\n        });\n        this.setState({\n          currentlyManagedDayIndex: index,\n          timeSelectDialogue: timeSelect\n        });\n      }\n    };\n\n    this.getTimeSetButtonClass = day => {\n      return this.state.selectedDays.includes(this.exactDayDescription(day)) ? 'time-set-button time-set-button-orange' : 'time-set-button time-set-button-white';\n    };\n\n    this.closeTimeSettings = () => {\n      this.setState({\n        timeSelectDialogue: null\n      });\n    };\n\n    this.setForAll = e => {\n      const newTimings = this.state.selectedTimings.slice();\n      const ind = this.state.currentlyManagedDayIndex;\n\n      if (e.target.checked) {\n        const globalTiming = this.state.selectedTimings[this.state.currentlyManagedDayIndex];\n\n        for (let i = 0; i < newTimings.length; i++) {\n          if (i !== ind) {\n            newTimings[i].storeLastValue();\n            newTimings[i].setTimingFull(globalTiming);\n          }\n        }\n      } else {\n        for (let i = 0; i < newTimings.length; i++) {\n          if (i !== ind) {\n            newTimings[i].backup();\n          }\n        }\n      }\n\n      this.setState({\n        selectedTimings: newTimings\n      });\n    };\n  }\n\n  render() {\n    const weekdays = this.weekdaysShort.map(day => {\n      return /*#__PURE__*/React.createElement(\"td\", {\n        key: day,\n        className: \"weekday\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }\n      }, day);\n    });\n    const blanks = [];\n    const realBlanksLen = +this.firstDayOfMonth() === 0 ? 7 : +this.firstDayOfMonth();\n\n    for (let i = 1; i < realBlanksLen; i++) {\n      blanks.push( /*#__PURE__*/React.createElement(\"td\", {\n        key: i * 80,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 25\n        }\n      }, \"\"));\n    }\n\n    const daysInMonth = [];\n\n    for (let d = 1; d <= this.daysInMonth(); d++) {\n      let dayClass = 'day';\n\n      if (this.state.selectedDays.includes(d)) {\n        dayClass += ' selected-day';\n      } else {\n        dayClass += ' non-selected-day';\n        const dayOfWeek = (blanks.length + d) % 7;\n        dayClass += dayOfWeek === 0 || dayOfWeek === 6 ? ' non-selected-weekend' : ' non-selected-weekday';\n      }\n\n      daysInMonth.push( /*#__PURE__*/React.createElement(\"td\", {\n        key: d,\n        onClick: e => {\n          this.onDayClick(e, d);\n        },\n        className: dayClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }\n      }, d, /*#__PURE__*/React.createElement(\"button\", {\n        className: this.getTimeSetButtonClass(d),\n        onClick: e => {\n          this.timeSetButton(e, d);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }\n      })));\n    }\n\n    const totalSlots = [...blanks, ...daysInMonth];\n    const rows = [];\n    let cells = [];\n    totalSlots.forEach((row, i) => {\n      if (i % 7 !== 0) {\n        cells.push(row);\n      } else {\n        rows.push(cells.slice());\n        cells = [];\n        cells.push(row);\n      }\n\n      if (i === totalSlots.length - 1) {\n        rows.push(cells.slice());\n      }\n    });\n    const trElements = rows.map((d, i) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i * 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }\n      }, d);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"calendar-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      id: \"calendar-table\",\n      className: \"transparent-element\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      id: \"calendar-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(this.MonthNav, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(this.YearNav, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"prev\",\n      className: \"time-move-btn\",\n      onClick: () => {\n        this.moveMonth(-1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 29\n      }\n    }, ''), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"next\",\n      className: \"time-move-btn\",\n      onClick: () => {\n        this.moveMonth(1);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 29\n      }\n    }, '')))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }\n    }, weekdays), trElements)), this.state.timeSelectDialogue);\n  }\n\n}\n\nexport default Calendar;","map":{"version":3,"sources":["C:/My/Projects/Web/sibur_arenda_1.0/src/components/Calendar.js"],"names":["React","moment","TimeSelectDialogue","Timing","Calendar","Component","state","dateContext","today","showMonthPopup","showYearPopup","selectedDays","selectedTimings","lastChosenWithShift","timeSelectDialogue","currentlyManagedDayIndex","weekdaysShort","months","year","format","month","monthEng","daysInMonth","firstDayOfMonth","startOf","setMonth","monthNo","indexOf","Object","assign","set","setState","moveMonth","side","add","SelectList","props","popup","monthList","map","monthName","onChangeMonth","MonthNav","showYearEditor","showYearNav","setYear","e","userInput","target","value","test","onKeyUpYear","which","YearNav","exactDayDescription","day","monthIndex","monthShort","monthsShort","onDayClick","className","clickedDayDescription","shiftKey","additionDays","additionTimings","includes","push","i","iDesc","newSelectedDays","slice","newSelectedTimings","index","splice","timeSelect","newDayIndex","changeTiming","attr","timing","newTimings","setTiming","timeSetButton","dayDesc","prob","length","newTimingObj","setForAll","closeTimeSettings","el","defaultValue","checked","getTimeSetButtonClass","ind","globalTiming","storeLastValue","setTimingFull","backup","render","weekdays","blanks","realBlanksLen","d","dayClass","dayOfWeek","totalSlots","rows","cells","forEach","row","trElements"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport '../resource/styles/Calendar.css'\r\nimport TimeSelectDialogue from \"./TimeSelectDialogue\";\r\nimport Timing from \"../functional/Timing\";\r\n\r\nclass Calendar extends React.Component {\r\n\r\n    state = {\r\n        dateContext: moment(),\r\n        today: moment(),\r\n        showMonthPopup: false,\r\n        showYearPopup: false,\r\n        selectedDays: [],\r\n        selectedTimings: [],\r\n        lastChosenWithShift: null,\r\n        timeSelectDialogue: null,\r\n        currentlyManagedDayIndex: -1\r\n    };\r\n\r\n    weekdaysShort = ['ПН', 'ВТ', 'СР', 'ЧТ', 'ПТ', 'СБ', 'ВС'];\r\n    months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\r\n\r\n    year = () => this.state.dateContext.format(\"Y\");\r\n\r\n    month = () => {\r\n        const monthEng = this.state.dateContext.format(\"MMMM\");\r\n        // eslint-disable-next-line default-case\r\n        switch (monthEng) {\r\n            case 'January': {\r\n                return 'Январь';\r\n            }\r\n            case 'February': {\r\n                return 'Февраль';\r\n            }\r\n            case 'March': {\r\n                return 'Март';\r\n            }\r\n            case 'April': {\r\n                return 'Апрель';\r\n            }\r\n            case 'May': {\r\n                return 'Май';\r\n            }\r\n            case 'June': {\r\n                return 'Июнь';\r\n            }\r\n            case 'July': {\r\n                return 'Июль';\r\n            }\r\n            case 'August': {\r\n                return 'Август';\r\n            }\r\n            case 'September': {\r\n                return 'Сентябрь';\r\n            }\r\n            case 'October': {\r\n                return 'Октябрь';\r\n            }\r\n            case 'November': {\r\n                return 'Ноябрь';\r\n            }\r\n            case 'December': {\r\n                return 'Декабрь';\r\n            }\r\n        }\r\n    };\r\n\r\n    daysInMonth = () => this.state.dateContext.daysInMonth();\r\n\r\n    firstDayOfMonth = () => moment(this.state.dateContext).startOf('month').format('d');\r\n\r\n    setMonth = (month) => {\r\n        const monthNo = this.months.indexOf(month);\r\n        let dateContext = Object.assign({}, this.state.dateContext);\r\n        dateContext = moment(dateContext).set(\"month\", monthNo);\r\n        this.setState({\r\n            dateContext: dateContext\r\n        });\r\n    };\r\n\r\n    moveMonth = (side) => {\r\n        let dateContext = Object.assign({}, this.state.dateContext);\r\n        dateContext = moment(dateContext).add(side, \"month\");\r\n        this.setState({\r\n            dateContext: dateContext\r\n        });\r\n    };\r\n\r\n    SelectList = (props) => {\r\n        const popup = props.monthList.map((monthName) => {\r\n            return (\r\n                <div key={monthName}>\r\n                    <p onClick={() => {\r\n                        this.setMonth(monthName)\r\n                    }}>\r\n                        {monthName}\r\n                    </p>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div id='month-select-popup'>\r\n                {popup}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    onChangeMonth = () => {\r\n        this.setState({\r\n            showMonthPopup: !this.state.showMonthPopup\r\n        });\r\n    };\r\n\r\n    MonthNav = () => {\r\n        return (\r\n            <span id='month-nav' onClick={() => {\r\n                this.onChangeMonth()\r\n            }}>\r\n                {this.month()}\r\n                {this.state.showMonthPopup\r\n                    ? <this.SelectList monthList={this.months}/>\r\n                    : null\r\n                }\r\n            </span>\r\n        );\r\n    };\r\n\r\n    showYearEditor = () => {\r\n        this.setState({\r\n            showYearNav: !this.state.showYearNav\r\n        });\r\n    };\r\n\r\n    setYear = (e) => {\r\n        const userInput = e.target.value;\r\n        if (/\\d+/.test(userInput)) {\r\n            let dateContext = Object.assign({}, this.state.dateContext);\r\n            dateContext = moment(dateContext).set(\"year\", e.target.value);\r\n            this.setState({\r\n                dateContext: dateContext\r\n            });\r\n        }\r\n    };\r\n\r\n    onKeyUpYear = (e) => {\r\n        if (e.which === 13 || e.which === 27) {\r\n            this.setYear(e);\r\n            this.setState({\r\n                showYearNav: false\r\n            })\r\n        }\r\n    };\r\n\r\n    YearNav = () => {\r\n        return (\r\n            this.state.showYearNav\r\n                ?\r\n                <span>\r\n                    <input\r\n                        defaultValue={this.year()}\r\n                        onKeyUp={(e) => this.onKeyUpYear(e)}\r\n                        type=\"number\"\r\n                    />\r\n                    <button\r\n                        className='transparent-element no-border-element'\r\n                        onClick={() => {\r\n                            this.showYearEditor()\r\n                        }}\r\n                    >\r\n                        OK\r\n                    </button>\r\n                </span>\r\n                :\r\n                <span\r\n                    onClick={() => {\r\n                        this.showYearEditor()\r\n                    }}\r\n                    id='year-nav'\r\n                >\r\n                {this.year()}\r\n                </span>\r\n        );\r\n    };\r\n\r\n    exactDayDescription = (day) => {\r\n        const monthIndex = moment.months().indexOf(this.state.dateContext.format(\"MMMM\"));\r\n        const monthShort = moment.monthsShort()[monthIndex];\r\n        return `${monthShort} ${day} ${this.year()}`\r\n    };\r\n\r\n    onDayClick = (e, day) => {\r\n        if (e.target.className.indexOf('time-set-button') === -1) {\r\n            const clickedDayDescription = this.exactDayDescription(day);\r\n            if (e.shiftKey) {\r\n                const additionDays = [];\r\n                const additionTimings = [];\r\n                if (this.state.lastChosenWithShift === null) {\r\n                    if (!this.state.selectedDays.includes(clickedDayDescription)) {\r\n                        additionDays.push(clickedDayDescription);\r\n                        additionTimings.push(new Timing());\r\n                    }\r\n                    this.setState({\r\n                        lastChosenWithShift: day,\r\n                        selectedDays: [...this.state.selectedDays, ...additionDays],\r\n                        selectedTimings: [...this.state.selectedTimings, ...additionTimings]\r\n                    });\r\n                } else {\r\n                    if (this.state.lastChosenWithShift < day) {\r\n                        for (let i = this.state.lastChosenWithShift + 1; i <= day; i++) {\r\n                            const iDesc = this.exactDayDescription(i);\r\n                            if (!this.state.selectedDays.includes(iDesc)) {\r\n                                additionDays.push(iDesc);\r\n                                additionTimings.push(new Timing());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        for (let i = day; i <= this.state.lastChosenWithShift - 1; i++) {\r\n                            const iDesc = this.exactDayDescription(i);\r\n                            if (!this.state.selectedDays.includes(iDesc)) {\r\n                                additionDays.push(iDesc);\r\n                                additionTimings.push(new Timing());\r\n                            }\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        lastChosenWithShift: null,\r\n                        selectedDays: [...this.state.selectedDays, ...additionDays],\r\n                        selectedTimings: [...this.state.selectedTimings, ...additionTimings]\r\n                    })\r\n                }\r\n            } else {\r\n                const newSelectedDays = this.state.selectedDays.slice();\r\n                const newSelectedTimings = this.state.selectedTimings.slice();\r\n                const index = newSelectedDays.indexOf(clickedDayDescription);\r\n                if (index > -1) {\r\n                    newSelectedDays.splice(index, 1);\r\n                    newSelectedTimings.splice(index, 1);\r\n                } else {\r\n                    newSelectedDays.push(clickedDayDescription);\r\n                    newSelectedTimings.push(new Timing());\r\n                }\r\n                const timeSelect =\r\n                    (index === +this.state.currentlyManagedDayIndex) ? null: this.state.timeSelectDialogue;\r\n                let newDayIndex = this.state.currentlyManagedDayIndex;\r\n                newDayIndex -= (index < newDayIndex) ? 1 : 0;\r\n                this.setState({\r\n                    selectedDays: newSelectedDays,\r\n                    selectedTimings: newSelectedTimings,\r\n                    timeSelectDialogue: timeSelect,\r\n                    currentlyManagedDayIndex: newDayIndex\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    changeTiming = (attr, timing) => {\r\n        const newTimings = this.state.selectedTimings.slice();\r\n        newTimings[this.state.currentlyManagedDayIndex].setTiming(attr, timing);\r\n        this.setState({\r\n            selectedTimings: newTimings\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const weekdays = this.weekdaysShort.map((day) => {\r\n            return (\r\n                <td key={day} className='weekday'>{day}</td>\r\n            )\r\n        });\r\n\r\n        const blanks = [];\r\n        const realBlanksLen = +this.firstDayOfMonth() === 0 ? 7 : +this.firstDayOfMonth();\r\n        for (let i = 1; i < realBlanksLen; i++) {\r\n            blanks.push(<td key={i * 80}>{\"\"}</td>);\r\n        }\r\n\r\n        const daysInMonth = [];\r\n        for (let d = 1; d <= this.daysInMonth(); d++) {\r\n            let dayClass = 'day';\r\n            if (this.state.selectedDays.includes(d)) {\r\n                dayClass += ' selected-day';\r\n            } else {\r\n                dayClass += ' non-selected-day';\r\n                const dayOfWeek = (blanks.length + d) % 7;\r\n                dayClass += (dayOfWeek === 0 || dayOfWeek === 6) ? ' non-selected-weekend' : ' non-selected-weekday'\r\n            }\r\n            daysInMonth.push(\r\n                <td\r\n                    key={d} onClick={(e) => {\r\n                    this.onDayClick(e, d)\r\n                }}\r\n                    className={dayClass}\r\n                >\r\n                    {d}\r\n                    <button\r\n                        className={this.getTimeSetButtonClass(d)}\r\n                        onClick={(e) => {this.timeSetButton(e, d)}}>\r\n                    </button>\r\n                </td>\r\n            );\r\n        }\r\n\r\n        const totalSlots = [...blanks, ...daysInMonth];\r\n        const rows = [];\r\n        let cells = [];\r\n\r\n        totalSlots.forEach((row, i) => {\r\n            if ((i % 7) !== 0) {\r\n                cells.push(row);\r\n            } else {\r\n                rows.push(cells.slice());\r\n                cells = [];\r\n                cells.push(row);\r\n            }\r\n            if (i === totalSlots.length - 1) {\r\n                rows.push(cells.slice());\r\n            }\r\n        });\r\n\r\n        const trElements = rows.map((d, i) => {\r\n            return (\r\n                <tr key={i * 100}>\r\n                    {d}\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div id='calendar-container'>\r\n                <table id='calendar-table' className='transparent-element'>\r\n                    <thead id='calendar-head'>\r\n                    <tr>\r\n                        <td colSpan=\"5\">\r\n                            <this.MonthNav/>\r\n                            {\" \"}\r\n                            <this.YearNav/>\r\n                        </td>\r\n                        <td colSpan=\"2\">\r\n                            <button\r\n                                id='prev'\r\n                                className='time-move-btn'\r\n                                onClick={() => {this.moveMonth(-1)}}>{''}</button>\r\n                            <button\r\n                                id='next'\r\n                                className='time-move-btn'\r\n                                onClick={() => {this.moveMonth(1)}}>{''}</button>\r\n                        </td>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr>\r\n                        {weekdays}\r\n                    </tr>\r\n                    {trElements}\r\n                    </tbody>\r\n                </table>\r\n                {this.state.timeSelectDialogue}\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    timeSetButton = (e, day) => {\r\n        const dayDesc = this.exactDayDescription(day);\r\n        if (!this.state.selectedDays.includes(dayDesc)) {\r\n            this.setState({\r\n                selectedDays: [...this.state.selectedDays, dayDesc],\r\n                selectedTimings: [...this.state.selectedTimings, new Timing()]\r\n            })\r\n        }\r\n        if (!e.shiftKey) {\r\n            const prob = this.state.selectedDays.indexOf(dayDesc);\r\n            const index = prob === -1 ? this.state.selectedDays.length : prob;\r\n            const newTimingObj = prob === -1 ? new Timing() : this.state.selectedTimings[index];\r\n            const timeSelect =\r\n                <\r\n                    TimeSelectDialogue\r\n                    dayToShow={newTimingObj}\r\n                    changeTiming={this.changeTiming}\r\n                    setForAll={this.setForAll}\r\n                    closeTimeSelectDialogue={() => this.closeTimeSettings()}\r\n                    startHRef={el => {if (el != null) el.value = el.defaultValue}}\r\n                    startMRef={el => {if (el != null) el.value = el.defaultValue}}\r\n                    endHRef={el => {if (el != null) el.value = el.defaultValue}}\r\n                    endMRef={el => {if (el != null) el.value = el.defaultValue}}\r\n                    checkBoxRef={el => {if (el != null) el.checked = false}}\r\n                />;\r\n            this.setState({\r\n                currentlyManagedDayIndex: index,\r\n                timeSelectDialogue: timeSelect\r\n            })\r\n        }\r\n    };\r\n\r\n    getTimeSetButtonClass = (day) => {\r\n        return this.state.selectedDays.includes(this.exactDayDescription(day))\r\n            ? 'time-set-button time-set-button-orange'\r\n            : 'time-set-button time-set-button-white'\r\n    };\r\n\r\n    closeTimeSettings = () => {\r\n        this.setState({\r\n            timeSelectDialogue: null\r\n        })\r\n    };\r\n\r\n    setForAll = (e) => {\r\n        const newTimings = this.state.selectedTimings.slice();\r\n        const ind = this.state.currentlyManagedDayIndex;\r\n        if (e.target.checked) {\r\n            const globalTiming = this.state.selectedTimings[this.state.currentlyManagedDayIndex];\r\n            for (let i = 0; i < newTimings.length; i++) {\r\n                if (i !== ind) {\r\n                    newTimings[i].storeLastValue();\r\n                    newTimings[i].setTimingFull(globalTiming);\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i < newTimings.length; i++) {\r\n                if (i !== ind) {\r\n                    newTimings[i].backup();\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            selectedTimings: newTimings\r\n        })\r\n    };\r\n}\r\n\r\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}